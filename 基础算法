一、动态规划
    满足动态规划的条件：1.无后效性；2.最优子结构；
    
    如果数组全初始化为0，则array[end]就是最终答案;如果只array[beg]=0,array[other]=-INF则需要枚举出最大值
    
    优化：    
    内存优化：看状态方程关联项，若都只跟前一个相关则可以压缩空间（滚动数组），从尾到首遍历可防止更改前项；
    剪枝：剪除不可能的支杆；
    
1.背包问题   
    DP[i][j]  表示只看前i件物品，总体积为j的情况下，最大价值多少。
    w[i]  第i件物品价值；v[i]  第i件物品体积； s[i]   第i件物品个数
    result=max{DP[n][0~capacity]}

    （1）01背包（物品只能选择一次）     
    不同情况：
        1>>：不选第i件物品，DP[i][j]=f[i-1][j];
        2>>：选第i件物品，DP[i][j]=f[i-1][j-v[i]]+w[i];条件 j-v[i]>=0;
        DP[i][j]=max{方案1，方案2}。
        优化：因为DP[i][j]只依赖于DP[i-1][*]故可以利用滚动数组优化，且需要j之前列的历史状态所以需要倒序遍历。
    伪代码：
        vector<int> f(m+1,0); //定义数组初始化为0
        for(int i=1;i<n;++i){   //物品遍历
            for(int j=m;j>=v[i];j--){   //当前容量能装下v[i]才修改，否则保持上一个物品最大值；逆序是为了使用i-1值
                f[j]=max(f[j],f[j-v[i]]+w[i]);
            }
        }
        return f[m];
         
    （2）完全背包（物品可无限次选择）
    不同情况：
        1>>：不选第i件物品，DP[i][j]=DP[i-1][j]
        2>>：选第i件物品，DP[i][j]=DP[i][j-v[i]]+w[i]；条件 j-v[i]>=0，且应包含第i件物品状态
        优化：DP[i][j]与当前j之前的最新状态有关，和历史的j状态有关，故利用滚动数组，正序遍历即可。    
    伪代码：
     vector<int> f(m+1,0); //定义数组初始化为0
     for(int i=0;i<n;i++){  
        for(int j=v[i];j<=m;j++){   //肯定从能装下第i件物品开始啦，不然不需要更新
            f[j]=max(f[j],f[j-v[i]]+w[i]);  //正序，f[<j]已经更新了，所以包含第i件物品的状态
        }
     }
     return f[m];
     
    （3）多重背包（物品可多次选择，但是有限制）
    不同情况：
        1>>：不选第i件物品，DP[i][j]=DP[i-1][j]
        2>>：选第i件物品，DP[i][j]=DP[i][j-v[i]]+w[i]；条件 j-v[i]>=0，且次数不能超过物品次数，应包含第i件物品状态。
        
    伪代码：    
     int f(m,0); //定义数组初始化为0
     for(int i=0;i<n;i++){  
        for(int j=m;j>=0;j--){     
            for(int k=1;k<=s[i] && k*v[i]<=j;k++)  //当前物品选择几次,且容量不能超过
                f[j]=max(f[j],f[j-k*v[i]]+k*w[i]);
        }
      }
      
      方法2：可以把多个物品拆成单个（比如7个就拆成1，2，4，)个物品，从而变成0，1背包问题
      伪代码：
        struct Good{    // 存储物品体积、价值
            int v,m;
        }
        vector<Good> goods; //转换成单个物品存储的向量
        for(int i=0;i<n;i++){
            for(int k=1;k<=s[i];k*=2){  //把s[i]个物品分解为 向上取整log2(s[i])个物品
                s-=k;
                goos.push_back({v[i]*k,w[i]*k});
            }
            if(s>0) goods.push_back({v[i]*s,w[i]*s});   //剩下的物品压入向量         
        }
        
        for(auto good:goods)    //0,1背包解法
            for(int j=m;j>=good.v;j--)
                f[j]=max(f[j],f[j-good.v]+good.w);
        return f[m];  
        
       方法3：？？？？？？？ 
       int f[N],g[N],q[N];
        for(int i=0;j<n;i++){
            for(int j=0;j<c;j++){
                int hh=0;tt=-1;
                for(int k=j;k<=m;k+=v[i]){
                    f[k]=g[k];
                    if(hh<=tt && k-s[i]*v[i]>q[hh]) hh++;
                    if(hh<=tt) f[k]=max(f[k],g[q[hh]]+(k-q[hh])/c*w);
                    while(hh<=tt && g[q[tt]]-(q[tt]-j)/c*w<=g[k]-(k-j)/c*w) tt--;
                    q[++tt]=k;
                }
            }
        }
        return f[m]; 
                 
    （4）混合背包（一类物品只能用一次，二类物品无线次，三类物品s[i]次）
    不同情况：
        1>>：01背包问题
        2>>：完全背包问题
        3>>：多重背包问题
        
        伪代码：
        struct Thing{
            int kind;   //-1:一次；0:无限次；其他:多次；
            int v,w;
        }
        vector<Thing>things;
        for(int i=0;i<n;i++){
            if(s[i]<0) things.push_back({-1,v[i],w[i]});
            else if(s==0) things.push_back({0,v[i],w[i]});
            else{
                for(int k=1;k<s[i];k*=2){
                s-=k;
                things.push_back({-1,v[i]*k,w[i]*k});                
                }
                if(s>0) things.push_back({-1,v[i]*s,w[i]*s});
            }
        }
        
        for(auto thing:things){
            if(thing.kind<0)
                for(int j=m;j>=thing.v;j--)
                    f[j]=max(f[j],f[j-thing.v]+thing.w);
            else
                for(int j=thing.v;j<=m;j++)
                    f[j]=max(f[j],f[j-thing.v]+thing.w)
        }
    
    
    （5）二维费用背包
    体积v[i],重量m[i]，价值w[i],f[j][k]；容量为j重量为k时的最大价值
    情况：
        1>>：不选第i件物品 f[i][j][k]=f[i-1][j][k]
        2>>：选第i件物品 f[i][j][k]=f[i-1][j-v[i]][k-m[i]]+w[i]
    
    伪代码：
    int f[V+1][M+1]
    for(int i=0;i<N;i++){
        for(int j=V;j>=v[i];j--)
            for(int k=M;k>=m[i];k--)
                f[j][k]=max(f[j][k],f[j-v[i]][k-m[i]]+w[i]);
            
    }
    return f[V][M];
    
    （6）分组背包(每组物品只能选一个)
     情况：
        f[j]=max{f[j],f[j-v[0]]+w[0],f[j-v[1]]+w[1],...,f[j-v[s-1]]+w[s-1]};
     伪代码：
     int f[N]
     for(int i=0;i<n;i++){
        for (int j=m;j>=0;j--)
            for(int k=0;k<s;k++)
                if(j>=v[k])
                    f[j]=max(f[j],f[j-v[k]]+w[k]);
     }
     return f[m];
    
    （7）背包问题求方案数
    （8）求背包问题得方案
    （9）有依赖的背包问题
  /****************************************************************************************************************************************************/  
  
二：递归
    递归要素：递归出口（边界）：明确什么时候终止递，开始归。
             递归顺序：有多个递分支时，所做事儿的代码插在不同位置会有不同的递归顺序
             递归参数及返回值问题：如何传递参数或外部变量，达到某种同步状态及剪枝效果，归时上一层怎么利用下一层的计算结果。
